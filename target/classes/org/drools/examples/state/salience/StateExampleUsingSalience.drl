/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.examples.state.salience
 
 
// Import the State Object from the calling Java class (StateExampleUsingSalience)... 
import org.drools.examples.state.State;


/*
The following code configures the rules engine to listen for property changes on those facts which have 'PropertyChangeSupport '.
*/

declare type State
    @propertyChangeSupport
end
 
 
 
/*
BootStrap Rule:
This rule fires when a state object exists in memory which has a name attribute = a, 
and a state attribute which has not been set to run. When it executes, it simply 
prints a message and sets its own state to completed.
*/

rule Bootstrap
    when
        a : State(name == "A", state == State.NOTRUN )
    then
        System.out.println(a.getName() + " finished" );
        a.setState( State.FINISHED );
end


 /*
This rule fires if there exists in working memory a state object (name=a,state=finished) *and*
another state object (name=b, state=notrun). It will execute in the similar manner, by printing
a message and setting it's state to finished.
*/
 
rule "A to B"
    when
        State(name == "A", state == State.FINISHED )
        b : State(name == "B", state == State.NOTRUN )
    then
        System.out.println(b.getName() + " finished" );
        b.setState( State.FINISHED );
end


 /*
SALIENCE RULE:
This rule ("B to C") has an identical LHS to the next rule ("B to D"), and therefore 
will cause a conflict of one should fire first in the Agenda. There are a few ways
that Drools can handle this, but in this case Drools settles the conflict by the use 
of a "Salience" value which effectively gives priority one rule over another in cases 
like these. This rule will fire BEFORE the next one.
 
Official Doc:
The execution of rule "A to B" changes the state of B to FINISHED, which activates both, 
rules "B to C" and "B to D", placing their Activations onto the Agenda. From this moment 
on, both rules may fire and, therefore, they are said to be "in conflict". The conflict 
resolution strategy allows the engine's Agenda to decide which rule to fire. As rule 
"B to C" has the higher salience value (10 versus the default salience value of 0), it 
fires first, modifying object C to state FINISHED. 
*/

rule "B to C"
    salience 10
    when
        State(name == "B", state == State.FINISHED )
        c : State(name == "C", state == State.NOTRUN )
    then
        System.out.println(c.getName() + " finished" );
        c.setState( State.FINISHED );
end


 /*
This rule ("B to D") has an identical LHS to the previous rule ("B to C"), and therefore 
will cause a conflict of one should fire first in the Agenda. There are a few ways
that Drools can handle this, but in this case Drools settles the conflict by the use 
of a "Salience" value which effectively gives priority one rule over another in cases 
like these. This rule will fire AFTER the previous one. 
*/

rule "B to D"
    when
        State(name == "B", state == State.FINISHED )
        d : State(name == "D", state == State.NOTRUN )
    then
        System.out.println(d.getName() + " finished" );
        d.setState( State.FINISHED );
end





