/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.examples.honestpolitician
 
 
 
 // Import the Hope and Politician Objects from the calling Java class (HonestPoliticianExample)...
import org.drools.examples.honestpolitician.Politician;
import org.drools.examples.honestpolitician.Hope;
 
 
 /*
 A Primer on Drools Truth Maintenance System (TMS):
 A "insertLogical" is part of the Drools Truth Maintenance System (TMS). When a fact is logically 
 inserted, this fact is dependant on the truth of the "when" clause. It means that when the rule 
 becomes false the fact is automatically retracted. This works particularly well as the two rules 
 are mutually exclusive. So in the above rules if the person is under 16 it inserts an IsChild fact, 
 once the person is 16 or over the IsChild fact is automatically retracted and the IsAdult fact inserted.
 */
 
/*
This rule fires first since it uses a salience of 10, and if it find at least 1 instance of an
honest politician, it will execute an 'insertLogical' statement which creates a new Hope Object
and inserts it. That statement will exist as long as it's logically true, when it is no longer,
it will be retracted.

Official Doc: 
As soon as there is at least one honest politician in the Working Memory a new Hope object is logically 
asserted. This object will only exist while there is at least one honest politician. As soon as all 
politicians are dishonest, the Hope object will be automatically retracted. This rule is given a 
salience of 10 to ensure that it fires before any other rule, as at this stage the "Hope is Dead" 
rule is actually true.

*/
 
rule "We have an honest Politician"
    salience 10
    when
        exists( Politician( honest == true ) )
    then
        insertLogical( new Hope() );
end



/*
As soon as a Hope object exists the "Hope Lives" rule matches and fires. It has a salience of 10 so 
that it takes priority over "Corrupt the Honest". It just simply reminds us that Hope is alive.
*/

rule "Hope Lives"
    salience 10
    when
        exists( Hope() )
    then
        System.out.println("Hurrah!!! Democracy Lives");
end



/*
With the Hope object being automatically retracted, via the truth maintenance system, the conditional 
element 'not' applied to Hope is no longer true so that the following rule will match and fire.
*/

rule "Hope is Dead"
    when
        not( Hope() )
    then
        System.out.println( "We are all Doomed!!! Democracy is Dead" );
end



/*
Now that there is hope and we have, at the start, four honest politicians, we have four activations 
for this rule, all in conflict. They will fire in turn, corrupting each politician so that they are 
no longer honest. When all four politicians have been corrupted we have no politicians with the property 
honest == true. Thus, the rule "We have an honest Politician" is no longer true and the object it logically 
inserted (due to the last execution of new Hope()) is automatically retracted.
*/

rule "Corrupt the Honest"
    when
        politician : Politician( honest == true )   
        exists( Hope() )
    then
        System.out.println( "I'm an evil corporation and I have corrupted " + politician.getName() );
        modify( politician ) { 
            setHonest( false ) 
        }
end



















