/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.tutorials.banking


/*
  We extend our Cashflow example, resulting in a TypedCashflow which can 
  be a credit or a debit operation - and only print out the CREDIT's.
   
  We identify a Cashflow fact with a type of CREDIT and extract the date 
  and the amount. In the second line of the rule we ensure that there is 
  no Cashflow of the same type with an earlier date than the one found. 
  In the consequence, we print the cashflow satisfying the patterns and 
  then retract it, making way for the next earliest cashflow of type CREDIT.
   
  Note: This rule simply prints the 'sorted' Cashflow objects.
  Here, we identify a Cashflow and extract the date and the 
  amount. In the second line of the rule we ensure that there 
  is no Cashflow with an earlier date than the one found. In 
  the consequence, we print the Cashflow that satisfies the 
  rule and then retract it, making way for the next earliest 
  Cashflow. 
  
  See Rule 3 for basic sorting rule example.
*/ 

rule "Rule 01"  
    when
        $cashflow : TypedCashflow( $date : date, $amount : amount, type == TypedCashflow.CREDIT )
        not TypedCashflow( date < $date, type == TypedCashflow.CREDIT )
    then
        System.out.println("Credit: "+$date+" :: "+$amount);   
        retract($cashflow);
end






