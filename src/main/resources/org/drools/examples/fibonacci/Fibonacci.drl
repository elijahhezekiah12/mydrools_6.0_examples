/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.examples.fibonacci

// Import the Fibonacci Object from the calling Java class (Fibonacci)...
import org.drools.examples.fibonacci.FibonacciExample.Fibonacci;


// Set the language to 'mvel' - This example doesn't use PropertyChangeSupport. 
// It uses the MVEL dialect, which means we can use the modify keyword, which 
// allows a block setter action which also notifies the engine of changes.
dialect "mvel"


/*
The rule Recurse is very simple. It matches each asserted Fibonacci object with 
a value of -1, creating and asserting a new Fibonacci object with a sequence of 
one less than the currently matched object. Each time a Fibonacci object is added 
while the one with a sequence field equal to 1 does not exist, the rule re-matches 
and fires again. The 'not' conditional element is used to stop the rule's matching 
once we have all 50 Fibonacci objects in memory. The rule also has a salience value, 
because we need to have all 50 Fibonacci objects asserted before we execute the 
Bootstrap rule.
*/


/*
A quick primer on conflict resolution with rules:
6.2.2.2. Conflict Resolution
What if you don't want the order of rule execution to be arbitrary? When there is one or more Rule 
Match on the Agenda they are said to be in conflict, and a conflict resolution strategy is used to 
determine the order of execution. The Drools strategy is very simple and based around a salience value, 
which assigns a priority to a rule. Each rule has a default value of 0, the higher the value the higher 
the priority. As a general rule, it is a good idea not to count on rules firing in any particular order, 
and to author the rules without worrying about a "flow". However when a flow is needed a number of 
possibilities exist beyond salience: agenda groups, rule flow groups, activation groups and control/semaphore 
facts. As of Drools 6.0 'rule definition order' in the source file is used to set priority *after* salience.
*/

/*
This is the recursion rule which combines the use of salience in order to ensure all of the Fibonacci 
objects are asserted before anything else happens. 
*/

rule Recurse
    salience 10
    when
        f : Fibonacci ( value == -1 )
        not ( Fibonacci ( sequence == 1 ) )    
    then
        insert( new Fibonacci( f.sequence - 1 ) );
        System.out.println( "recurse for " + f.sequence );
end


/*
When a Fibonacci object with a sequence field of 2 is asserted the "Bootstrap" rule is matched and activated 
along with the "Recurse" rule. Note the multi-restriction on field sequence, testing for equality with 1 or 2.
*/

rule Bootstrap
    when
        f : Fibonacci( sequence == 1 || == 2, value == -1 ) // this is a multi-restriction || on a single field
    then 
        modify ( f ){ value = 1 };
        System.out.println( f.sequence + " == " + f.value );
end


/*
This rule does the core calculations. It is useful to note the practice of binding the object's variables and 
the other practice of not binding the. Also, note the access those bindings programatically. 
*/

rule Calculate
    when
        f1 : Fibonacci( s1 : sequence, value != -1 ) // here we bind sequence variable from the Fibonacci Object
        f2 : Fibonacci( sequence == (s1 + 1 ), value != -1 ) // here we don't, just to demonstrate the different way bindings can be used
        f3 : Fibonacci( s3 : sequence == (f2.sequence + 1 ), value == -1 )              
    then    
        modify ( f3 ) { value = f1.value + f2.value };
        System.out.println( s3 + " == " + f3.value ); // Note how you can access pattern and field  bindings
end 

/*
    public static class Fibonacci {
        private int  sequence;
        private long value;
*/






